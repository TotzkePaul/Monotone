import java.util.ArrayList;
import java.util.Collections;

import convexHull.Point2d;


public class Visibility {

	public static ArrayList<Point2d>[] point2dVisibility(ArrayList<Point2d> polygon){
		@SuppressWarnings("unchecked")
		ArrayList<Point2d>[] visiblePoints = new ArrayList[polygon.size()];
		ArrayList<Point2d> upperHull = new ArrayList<Point2d>();
		ArrayList<Point2d> lowerHull = new ArrayList<Point2d>();
		{
			Point2d previous = polygon.get(0);
			upperHull.add(previous);
			for(int i=1; i<polygon.size();i++){
				if(previous.x < polygon.get(i).x){
					upperHull.add(polygon.get(i));
				} else {
					lowerHull.add(polygon.get(i));
				}
				previous = polygon.get(i);
			}
		}
		
		for(int i = 0; i <polygon.size(); i++){
			visiblePoints[i] = new ArrayList<Point2d>(polygon);
			ArrayList<Point2d> removedPoints = new ArrayList<Point2d>();
			for(int j = 0; j<polygon.size(); j++){
				if(i<j){
					boolean finished = false;
					boolean foundBlock = false;
					for(int k = 0; k<upperHull.size(); k++){
						boolean isWithinRange = (polygon.get(i).x < polygon.get(k).x 
								&& polygon.get(k).x <polygon.get(j).x)
								  || (polygon.get(i).x > polygon.get(k).x 
										  && polygon.get(k).x > polygon.get(j).x);
						if(isWithinRange){						
							if(isAbove(polygon.get(i), polygon.get(j), upperHull.get(k))){
								removedPoints.add(polygon.get(j));
								foundBlock = true;
								break;
							}
							finished = true;
						} else if (finished){
							break;
						}
					}
					if(foundBlock){
						break;
					}
					for(int k = 0; k<lowerHull.size(); k++){
						boolean isWithinRange = (polygon.get(i).x < polygon.get(k).x 
								&& polygon.get(k).x <polygon.get(j).x)
								  || (polygon.get(i).x > polygon.get(k).x 
										  && polygon.get(k).x > polygon.get(j).x);
						if(isWithinRange){						
							if(isBelow(polygon.get(i), polygon.get(j), lowerHull.get(k))){
								removedPoints.add(polygon.get(j));
								break;
							}
							finished = true;
						} else if (finished){
							break;
						}
					}
					/**
					Point2d previous = polygon.get(0);
					for(int k = 0; k<polygon.size(); k++){
						boolean isWithinRange = (polygon.get(i).x < polygon.get(k).x && polygon.get(k).x <polygon.get(j).x)
											  || (polygon.get(i).x > polygon.get(k).x && polygon.get(k).x > polygon.get(j).x);
						if(isWithinRange){
							
							if(previous.x < polygon.get(k).x){								
								if(isAbove(polygon.get(i), polygon.get(j), polygon.get(k))){
									removedPoints.add(polygon.get(j));
								}
							} else {
								if(isBelow(polygon.get(i), polygon.get(j), polygon.get(k))){
									removedPoints.add(polygon.get(j));
								}
							}
						}
						previous = polygon.get(k);
					} */
				} else if(i>j){
					if(!visiblePoints[i].contains(polygon.get(j))){
						removedPoints.add(polygon.get(j));
					}
				}
			}
			visiblePoints[i].removeAll(removedPoints);
		}
		
		return visiblePoints;
	}
	
	public static boolean isAbove(Point2d a, Point2d b, Point2d c){
		if(a.x > b.x){
			//
			Point2d swap = a;
			a=b;
			b=swap;
		}
		return ((b.x - a.x)*(c.y - a.y) - (b.y - a.y)*(c.x - a.x)) > 0;
	}
	
	public static boolean isBelow(Point2d a, Point2d b, Point2d c){
		if(a.x > b.x){
			//
			Point2d swap = a;
			a=b;
			b=swap;
		}
		return ((b.x - a.x)*(c.y - a.y) - (b.y - a.y)*(c.x - a.x)) < 0;
	}
	
}
